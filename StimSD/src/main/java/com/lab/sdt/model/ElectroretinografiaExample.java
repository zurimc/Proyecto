package com.lab.sdt.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class ElectroretinografiaExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table electroretinografia
     *
     * @mbg.generated Tue Oct 01 23:17:02 CDT 2019
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table electroretinografia
     *
     * @mbg.generated Tue Oct 01 23:17:02 CDT 2019
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table electroretinografia
     *
     * @mbg.generated Tue Oct 01 23:17:02 CDT 2019
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table electroretinografia
     *
     * @mbg.generated Tue Oct 01 23:17:02 CDT 2019
     */
    public ElectroretinografiaExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table electroretinografia
     *
     * @mbg.generated Tue Oct 01 23:17:02 CDT 2019
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table electroretinografia
     *
     * @mbg.generated Tue Oct 01 23:17:02 CDT 2019
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table electroretinografia
     *
     * @mbg.generated Tue Oct 01 23:17:02 CDT 2019
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table electroretinografia
     *
     * @mbg.generated Tue Oct 01 23:17:02 CDT 2019
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table electroretinografia
     *
     * @mbg.generated Tue Oct 01 23:17:02 CDT 2019
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table electroretinografia
     *
     * @mbg.generated Tue Oct 01 23:17:02 CDT 2019
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table electroretinografia
     *
     * @mbg.generated Tue Oct 01 23:17:02 CDT 2019
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table electroretinografia
     *
     * @mbg.generated Tue Oct 01 23:17:02 CDT 2019
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table electroretinografia
     *
     * @mbg.generated Tue Oct 01 23:17:02 CDT 2019
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table electroretinografia
     *
     * @mbg.generated Tue Oct 01 23:17:02 CDT 2019
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table electroretinografia
     *
     * @mbg.generated Tue Oct 01 23:17:02 CDT 2019
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdelectroIsNull() {
            addCriterion("idElectro is null");
            return (Criteria) this;
        }

        public Criteria andIdelectroIsNotNull() {
            addCriterion("idElectro is not null");
            return (Criteria) this;
        }

        public Criteria andIdelectroEqualTo(Integer value) {
            addCriterion("idElectro =", value, "idelectro");
            return (Criteria) this;
        }

        public Criteria andIdelectroNotEqualTo(Integer value) {
            addCriterion("idElectro <>", value, "idelectro");
            return (Criteria) this;
        }

        public Criteria andIdelectroGreaterThan(Integer value) {
            addCriterion("idElectro >", value, "idelectro");
            return (Criteria) this;
        }

        public Criteria andIdelectroGreaterThanOrEqualTo(Integer value) {
            addCriterion("idElectro >=", value, "idelectro");
            return (Criteria) this;
        }

        public Criteria andIdelectroLessThan(Integer value) {
            addCriterion("idElectro <", value, "idelectro");
            return (Criteria) this;
        }

        public Criteria andIdelectroLessThanOrEqualTo(Integer value) {
            addCriterion("idElectro <=", value, "idelectro");
            return (Criteria) this;
        }

        public Criteria andIdelectroIn(List<Integer> values) {
            addCriterion("idElectro in", values, "idelectro");
            return (Criteria) this;
        }

        public Criteria andIdelectroNotIn(List<Integer> values) {
            addCriterion("idElectro not in", values, "idelectro");
            return (Criteria) this;
        }

        public Criteria andIdelectroBetween(Integer value1, Integer value2) {
            addCriterion("idElectro between", value1, value2, "idelectro");
            return (Criteria) this;
        }

        public Criteria andIdelectroNotBetween(Integer value1, Integer value2) {
            addCriterion("idElectro not between", value1, value2, "idelectro");
            return (Criteria) this;
        }

        public Criteria andIdexpconsultaIsNull() {
            addCriterion("idExpConsulta is null");
            return (Criteria) this;
        }

        public Criteria andIdexpconsultaIsNotNull() {
            addCriterion("idExpConsulta is not null");
            return (Criteria) this;
        }

        public Criteria andIdexpconsultaEqualTo(Integer value) {
            addCriterion("idExpConsulta =", value, "idexpconsulta");
            return (Criteria) this;
        }

        public Criteria andIdexpconsultaNotEqualTo(Integer value) {
            addCriterion("idExpConsulta <>", value, "idexpconsulta");
            return (Criteria) this;
        }

        public Criteria andIdexpconsultaGreaterThan(Integer value) {
            addCriterion("idExpConsulta >", value, "idexpconsulta");
            return (Criteria) this;
        }

        public Criteria andIdexpconsultaGreaterThanOrEqualTo(Integer value) {
            addCriterion("idExpConsulta >=", value, "idexpconsulta");
            return (Criteria) this;
        }

        public Criteria andIdexpconsultaLessThan(Integer value) {
            addCriterion("idExpConsulta <", value, "idexpconsulta");
            return (Criteria) this;
        }

        public Criteria andIdexpconsultaLessThanOrEqualTo(Integer value) {
            addCriterion("idExpConsulta <=", value, "idexpconsulta");
            return (Criteria) this;
        }

        public Criteria andIdexpconsultaIn(List<Integer> values) {
            addCriterion("idExpConsulta in", values, "idexpconsulta");
            return (Criteria) this;
        }

        public Criteria andIdexpconsultaNotIn(List<Integer> values) {
            addCriterion("idExpConsulta not in", values, "idexpconsulta");
            return (Criteria) this;
        }

        public Criteria andIdexpconsultaBetween(Integer value1, Integer value2) {
            addCriterion("idExpConsulta between", value1, value2, "idexpconsulta");
            return (Criteria) this;
        }

        public Criteria andIdexpconsultaNotBetween(Integer value1, Integer value2) {
            addCriterion("idExpConsulta not between", value1, value2, "idexpconsulta");
            return (Criteria) this;
        }

        public Criteria andAizqIsNull() {
            addCriterion("AIzq is null");
            return (Criteria) this;
        }

        public Criteria andAizqIsNotNull() {
            addCriterion("AIzq is not null");
            return (Criteria) this;
        }

        public Criteria andAizqEqualTo(Integer value) {
            addCriterion("AIzq =", value, "aizq");
            return (Criteria) this;
        }

        public Criteria andAizqNotEqualTo(Integer value) {
            addCriterion("AIzq <>", value, "aizq");
            return (Criteria) this;
        }

        public Criteria andAizqGreaterThan(Integer value) {
            addCriterion("AIzq >", value, "aizq");
            return (Criteria) this;
        }

        public Criteria andAizqGreaterThanOrEqualTo(Integer value) {
            addCriterion("AIzq >=", value, "aizq");
            return (Criteria) this;
        }

        public Criteria andAizqLessThan(Integer value) {
            addCriterion("AIzq <", value, "aizq");
            return (Criteria) this;
        }

        public Criteria andAizqLessThanOrEqualTo(Integer value) {
            addCriterion("AIzq <=", value, "aizq");
            return (Criteria) this;
        }

        public Criteria andAizqIn(List<Integer> values) {
            addCriterion("AIzq in", values, "aizq");
            return (Criteria) this;
        }

        public Criteria andAizqNotIn(List<Integer> values) {
            addCriterion("AIzq not in", values, "aizq");
            return (Criteria) this;
        }

        public Criteria andAizqBetween(Integer value1, Integer value2) {
            addCriterion("AIzq between", value1, value2, "aizq");
            return (Criteria) this;
        }

        public Criteria andAizqNotBetween(Integer value1, Integer value2) {
            addCriterion("AIzq not between", value1, value2, "aizq");
            return (Criteria) this;
        }

        public Criteria andAderIsNull() {
            addCriterion("ADer is null");
            return (Criteria) this;
        }

        public Criteria andAderIsNotNull() {
            addCriterion("ADer is not null");
            return (Criteria) this;
        }

        public Criteria andAderEqualTo(Integer value) {
            addCriterion("ADer =", value, "ader");
            return (Criteria) this;
        }

        public Criteria andAderNotEqualTo(Integer value) {
            addCriterion("ADer <>", value, "ader");
            return (Criteria) this;
        }

        public Criteria andAderGreaterThan(Integer value) {
            addCriterion("ADer >", value, "ader");
            return (Criteria) this;
        }

        public Criteria andAderGreaterThanOrEqualTo(Integer value) {
            addCriterion("ADer >=", value, "ader");
            return (Criteria) this;
        }

        public Criteria andAderLessThan(Integer value) {
            addCriterion("ADer <", value, "ader");
            return (Criteria) this;
        }

        public Criteria andAderLessThanOrEqualTo(Integer value) {
            addCriterion("ADer <=", value, "ader");
            return (Criteria) this;
        }

        public Criteria andAderIn(List<Integer> values) {
            addCriterion("ADer in", values, "ader");
            return (Criteria) this;
        }

        public Criteria andAderNotIn(List<Integer> values) {
            addCriterion("ADer not in", values, "ader");
            return (Criteria) this;
        }

        public Criteria andAderBetween(Integer value1, Integer value2) {
            addCriterion("ADer between", value1, value2, "ader");
            return (Criteria) this;
        }

        public Criteria andAderNotBetween(Integer value1, Integer value2) {
            addCriterion("ADer not between", value1, value2, "ader");
            return (Criteria) this;
        }

        public Criteria andBizqIsNull() {
            addCriterion("BIzq is null");
            return (Criteria) this;
        }

        public Criteria andBizqIsNotNull() {
            addCriterion("BIzq is not null");
            return (Criteria) this;
        }

        public Criteria andBizqEqualTo(Integer value) {
            addCriterion("BIzq =", value, "bizq");
            return (Criteria) this;
        }

        public Criteria andBizqNotEqualTo(Integer value) {
            addCriterion("BIzq <>", value, "bizq");
            return (Criteria) this;
        }

        public Criteria andBizqGreaterThan(Integer value) {
            addCriterion("BIzq >", value, "bizq");
            return (Criteria) this;
        }

        public Criteria andBizqGreaterThanOrEqualTo(Integer value) {
            addCriterion("BIzq >=", value, "bizq");
            return (Criteria) this;
        }

        public Criteria andBizqLessThan(Integer value) {
            addCriterion("BIzq <", value, "bizq");
            return (Criteria) this;
        }

        public Criteria andBizqLessThanOrEqualTo(Integer value) {
            addCriterion("BIzq <=", value, "bizq");
            return (Criteria) this;
        }

        public Criteria andBizqIn(List<Integer> values) {
            addCriterion("BIzq in", values, "bizq");
            return (Criteria) this;
        }

        public Criteria andBizqNotIn(List<Integer> values) {
            addCriterion("BIzq not in", values, "bizq");
            return (Criteria) this;
        }

        public Criteria andBizqBetween(Integer value1, Integer value2) {
            addCriterion("BIzq between", value1, value2, "bizq");
            return (Criteria) this;
        }

        public Criteria andBizqNotBetween(Integer value1, Integer value2) {
            addCriterion("BIzq not between", value1, value2, "bizq");
            return (Criteria) this;
        }

        public Criteria andBdderIsNull() {
            addCriterion("BDder is null");
            return (Criteria) this;
        }

        public Criteria andBdderIsNotNull() {
            addCriterion("BDder is not null");
            return (Criteria) this;
        }

        public Criteria andBdderEqualTo(Integer value) {
            addCriterion("BDder =", value, "bdder");
            return (Criteria) this;
        }

        public Criteria andBdderNotEqualTo(Integer value) {
            addCriterion("BDder <>", value, "bdder");
            return (Criteria) this;
        }

        public Criteria andBdderGreaterThan(Integer value) {
            addCriterion("BDder >", value, "bdder");
            return (Criteria) this;
        }

        public Criteria andBdderGreaterThanOrEqualTo(Integer value) {
            addCriterion("BDder >=", value, "bdder");
            return (Criteria) this;
        }

        public Criteria andBdderLessThan(Integer value) {
            addCriterion("BDder <", value, "bdder");
            return (Criteria) this;
        }

        public Criteria andBdderLessThanOrEqualTo(Integer value) {
            addCriterion("BDder <=", value, "bdder");
            return (Criteria) this;
        }

        public Criteria andBdderIn(List<Integer> values) {
            addCriterion("BDder in", values, "bdder");
            return (Criteria) this;
        }

        public Criteria andBdderNotIn(List<Integer> values) {
            addCriterion("BDder not in", values, "bdder");
            return (Criteria) this;
        }

        public Criteria andBdderBetween(Integer value1, Integer value2) {
            addCriterion("BDder between", value1, value2, "bdder");
            return (Criteria) this;
        }

        public Criteria andBdderNotBetween(Integer value1, Integer value2) {
            addCriterion("BDder not between", value1, value2, "bdder");
            return (Criteria) this;
        }

        public Criteria andFechaeIsNull() {
            addCriterion("fechaE is null");
            return (Criteria) this;
        }

        public Criteria andFechaeIsNotNull() {
            addCriterion("fechaE is not null");
            return (Criteria) this;
        }

        public Criteria andFechaeEqualTo(Date value) {
            addCriterion("fechaE =", value, "fechae");
            return (Criteria) this;
        }

        public Criteria andFechaeNotEqualTo(Date value) {
            addCriterion("fechaE <>", value, "fechae");
            return (Criteria) this;
        }

        public Criteria andFechaeGreaterThan(Date value) {
            addCriterion("fechaE >", value, "fechae");
            return (Criteria) this;
        }

        public Criteria andFechaeGreaterThanOrEqualTo(Date value) {
            addCriterion("fechaE >=", value, "fechae");
            return (Criteria) this;
        }

        public Criteria andFechaeLessThan(Date value) {
            addCriterion("fechaE <", value, "fechae");
            return (Criteria) this;
        }

        public Criteria andFechaeLessThanOrEqualTo(Date value) {
            addCriterion("fechaE <=", value, "fechae");
            return (Criteria) this;
        }

        public Criteria andFechaeIn(List<Date> values) {
            addCriterion("fechaE in", values, "fechae");
            return (Criteria) this;
        }

        public Criteria andFechaeNotIn(List<Date> values) {
            addCriterion("fechaE not in", values, "fechae");
            return (Criteria) this;
        }

        public Criteria andFechaeBetween(Date value1, Date value2) {
            addCriterion("fechaE between", value1, value2, "fechae");
            return (Criteria) this;
        }

        public Criteria andFechaeNotBetween(Date value1, Date value2) {
            addCriterion("fechaE not between", value1, value2, "fechae");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table electroretinografia
     *
     * @mbg.generated do_not_delete_during_merge Tue Oct 01 23:17:02 CDT 2019
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table electroretinografia
     *
     * @mbg.generated Tue Oct 01 23:17:02 CDT 2019
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}